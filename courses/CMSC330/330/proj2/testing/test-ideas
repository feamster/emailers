Notes:

  1. There are several tiny special cases mentioned in Piazza (for example
     whether days can have leading 0s, what order two sessions that have the
     same start time and same duration should be printed in, etc.).  Let's
     just avoid testing these really tricky and unimportant special cases,
     and concentrate on things that the project assignment itself is
     specific and explicit about.

  2. Name the files secretXX.input, secretXX.passwd, secretXX.group, and
     secretXX.output, for XX in 01, 02,...

  3. These are just my (partial) ideas.  They can be changed or added to.

  4. Many of the inputs can use the same password and group files as the
     public tests, but some should use different ones (in my ideas below,
     the first eight use the same password and group files as the public
     tests).

  5. It would be better to create the tests on a Unix machine (one of the
     Grace machines), but if you create them on a Windows machine be sure to
     run dos2unix on them after uploading them.

  6. In some of the tests I suggest just adding one thing to one of the
     public tests, so that the tests as much as possible only test one
     thing.  For some of the other tests, you could use different user
     names, machine names, group names, data for different months, than
     what's in the public tests.

Ideas:

  1. An input that has overlapping login times for multiple users in the
     third section, but all of them are for one user then for the other.
     For example:

     bob:
       time1
       time2

     bob:
       time3
       time4

     sally:
       time5
       time6

     sally:
       time7
       time8

     sally:
       time9
       time10

  2. An input that has overlapping login times for multiple users in the
     third section, mixed up by order of time.  For example:

     bob:
       time1
       time2

     sally:
       time3
       time4

     sally:
       time5
       time6

     bob:
       time7
       time8

     sally:
       time9
       time10

  3. An input where there are overlapping login times for the same user but
     from the same host (nothing should be in the third section for these).
     To make it as much as possible that each test only tests one thing, you
     can just modify the fourth public test by adding one line to cause this
     situation.  The output should be identical to the fourth public test's
     output (nothing should be in the fourth section for this line).

  4. An input where there are overlapping login times from different hosts
     but for different users (nothing should be in the third section for
     these).  To make it as much as possible that each test only tests one
     thing, you can just modify the fourth public test by adding one line to
     cause this situation.  The output should be identical to the fourth
     public test's output (nothing should be in the fourth section for this
     line).

  5. An input that just has two login times (to make it as much as possible
     that each test only tests one thing) where one login time ends at
     exacly the same time as the other one starts (for the same user and
     different machines); this should be considered overlapping logings and
     cause output in the third section's.

  6. An input that just has two overlapping login times (to make it as much
     as possible that each test only tests one thing) where one login time
     has a number of days in its duration.  This was not tested in the
     public tests.

  7. An input that just has two overlapping login times (to make it as much
     as possible that each test only tests one thing) where both login times
     have a number of days in their durations.

  8. An input in which every user logged in at least once.

  9. An input in which the group names are different than the public inputs,
     there are more groups, there are more users with different names than
     in the public inputs, and the group numbers are not consecutive
     integers (for example the group numbers might be 100, 1000, 500, 300,
     123, 987, etc.).

  10. One input with an invalid line in the password file that should be
      ignored.  (To make it as much as possible that each test only tests
      one thing, the files for this test can be identical to one of the
      public tests, except for this one added line.)

  11. One input with an invalid line in the group file that should be
      ignored.  (To make it as much as possible that each test only tests
      one thing, the files for this test can be identical to one of the
      public tests, except for this one added line.)

  12. One input with a syntactically invalid line in the standard input that
      should be ignored (wrong number of fields, for example).  (To make it
      as much as possible that each test only tests one thing, the files for
      this test can be identical to one of the public tests, except for this
      one added line.)

  13. Two or three inputs with a syntactically valid but semantically
      invalid line in the standard input that should be ignored.  (To make
      it as much as possible that each test only tests one thing, the files
      for this test can be identical to one of the public tests, except for
      this one added line.)  For example: invalid month name (like Ocd
      instead of Oct), invalid day number for month (like Sep 31), invalid
      time (hours > 24, minutes and seconds > 60).

  14. A large input with a number of users and overlapping logins, that
      should have multiple interleaved outputs in the third section.

  15. Not sure what else.  (Are there other important situations mentioned in
      the project that should be tested?)
