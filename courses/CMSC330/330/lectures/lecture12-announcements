Lecture #12: week 7, lecture 1, Tuesday October 9

1. Project #2

   It's posted.

2. Dr. Feamster's office hours today

   They're cancelled because he's out of town.

3. Office hours Friday afternoon

   The usual 3-5 office hours on Fridays will be 2-4 (this Friday only).

4. Exam #1

   - It's on Thursday, during lecture (I'll be here again then, since
     Dr. Feamster will still be out of town).

   - I'm not sure how far it'll cover through; we'll have to see how far we
     get in class today (where a good stopping point is).  Ask me in the
     last five minutes of class if I forget.

   - Practice exams (with solutions) are posted.  Don't just look at the
     questions or answers; you have to solve the problems.  If you have
     questions you're welcome to come to office hours.

   - The practice exams are NOT a guarantee of what your exam will look
     like; they're just a study aid to let you know what you know or what
     you might need to study more or ask questions about.

   - We also posted some exams from recent semesters in this course, which
     are useful practice, but they were not written by this semester's
     instructors.  Since everyone writes exams and projects a little
     differently, the practice exams that we wrote are the best guide to the
     types of questions that you might see (as well as your quizzes this
     semester, and the posted practice problems).

   - We may not have covered all the material these materials ask about (we
     may not get to it all today).  For this exam, just ignore anything that
     we don't cover.

   - On Thursday:

     - Use pencil for the exam- not pen- so your answers are legible.
  
     - Bring your University ID number to the exam.
  
     - The campus Honor Pledge will be on the front page.  The Campus Senate
       requests that you write it in full and sign it on exams.  I'll give an
       extra minute for it at the end so it doesn't come out of your exam time.
  
     - You will LOSE CREDIT during grading if there are any pages on the exam
       that you haven't written your name on.  (Obviously the motivation is to
       get you to write your name on all the pages so we don't have to deduct
       credit from anyone.)  In the grading process the pages of everyone's
       exam are separated, and if you don't write your name on all the pages
       there's a chance one of your pages might get lost, and it takes much
       longer to grade the exams when we have to figure out which pages belong
       to whose exam.  Since it already takes a long time to grade the exams,
       it doesn't need to be made any longer unnecessarily.
  
     - You must be prepared to turn in your exam immediately at the end.

4. Test your automata

   If you have to write an automaton for an exam or a quiz, you have to
   "test" it just like a program.  Of course you don't run it, unless you
   write a simulation of an automaton, but you trace it through mentally.
   First identify what the language is, and what valid and invalid strings
   look like (before writing the automaton).  When you've written it, trace
   it through on valid strings of different forms, to make sure it accepts
   all of them, and invalid strings of different forms and make sure it
   rejects all of them.  Just like testing a method, be sure to check
   special cases and boundary cases, like the empty string, strings of
   length 1, any strings that are special based on the description of the
   langauge, etc.

5. From lecture

   - I said I would come back with the name and an example of the Ruby
     method that allows you to get the index of the iteration while you're
     in a code block.  The Enumerable class has an each_with_index() that
     does that; here's an example:

     gets().scan(/\w+/).each_with_index { |elt, idx|
       puts("word #{idx.to_i() + 1} is #{elt}")
     }

     Note it's a code block that has two parameters.

   - Point out that the more efficient version of reverse is tail recursive.

   - Things to point out in Dr. Feamster's lecture (I mentioned in mine),
     just in the way of review:

     - OCaml has static types and type inference.  The advantage of static
       types is you get a syntax error at compilation when you do something
       wrong, rather than a runtime error later (when the program may just
       fail for a user, rather than the programmer who wrote it).

     - ; in OCaml evaluates its arguments left to right, throwing all their
       values away except the last one, which is the returned value.  Why
       would you want to evaluate things just to throw away their values?
       When they have side effects (be sure students understand what side
       effects are).  It's like the comma operator in C, that allows you to
       put multiple expressions whereever a single expression can go.

     - What a functional language is:

       - has higher-order functions (functions that can either take other
         functions as arguments or return them as results)

       - commonly avoids mutable data and side effects
