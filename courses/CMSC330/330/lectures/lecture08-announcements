Lecture #8: week 5, lecture 1, Tuesday September 25

1. Larry

   Larry's office hours tomorrow (Wednesday) will be cancelled, and he won't
   be answering email.

2. Quiz #2

   It'll be this Friday.

   We'll check and if we see that any past semesters' quizzes are applicable
   for this quiz we'll also post them on the webpage, like we did for the
   first quiz.  But we're covering material in a little different order than
   the course has done some times in the past, and we're also a little
   behind in lecture, so there may not be any past quizzes that are
   applicable.  If there are, they will be put on the webpage in a day or
   so.

3. Practice problems

   Practice problems about formal regular expressions automata have been
   posted.  Practice problems about automata have also been posted.  The
   practice problems are very important, so work hard on them, meaning don't
   just look at the questions and answers, but really try to do the
   problems.  Some problems of these types may be ones that you have to
   spend some time thinking about, even mulling over for a day or two.

4. Project #1

   It's posted and due next Wednesday.

   Be sure to periodically check Piazza.

   IMPORTANT: note that the project says how you have to identify tokens in
   the input.  If you don't do things this way, you won't always get the
   right results.  Two important points:

   - You have to match the input against the possible different types of
     tokens starting AT THE BEGINNING of the string.

     (If you don't do this, your program might for example have an input
     like "misconstrued = 100", and say that "true" is a boolean, but
     instead, "misconstrued" should be called an identifier.)

   - After finding the LONGEST token that matches at the beginning, you need
     to repeat the process starting from right after the end of that longest
     token.

   So an outline of the process would conceptually look like this:

   while there are more lines in the input
     read a line
     do
       match the LONGEST token starting at the BEGINNING of the line
       SKIP past the first token (so the next match will begin right after it)
     while not at the end of the line that was read
   end

   But as the project assignment says, I recommend doing this last- first
   write regular expressions that match the different token types- and test
   them- then go back and implement the above.

   (Note this really is very slightly off, as it implies there will be at
   least one input line.)

5. Review

   First review the components of a formal r.e., and the differences between
   DFAs and NFAs.
